=title USP: Prerequisite Knowledge
=timestamp Sep 13, 2011 at 1:29 AM
=description This is the first article in the series of our guest author Eric Wong about Unix systems programming (USP).
=entry

h2. Introduction (by RKlemme)

This series started out with "this posting of Eric":http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/387469 to ruby-talk:

??I would like to do a series of mailing list posts on the subject of Unix systems programming in Ruby.  I only intend to cover standardized, POSIX-compliant features of the standard Ruby distribution.  No extensions or Linux-only parts.??

I volunteered to edit his postings and mirror them on the "Practicing Ruby" blog (formerly "Ruby Best Practices").  I will try to mirror articles as quickly as possible but the blog will certainly be lagging behind a bit.

You may discuss articles here on the blog or on the mailing list where there are originally published: "usp.ruby@librelist.org":mailto:usp.ruby@librelist.org ("subscribe":mailto:usp.ruby-subscribe@librelist.com)

Now let's start with the original text.


h2. What you should know

* You should know basic Ruby syntax.
* Bourne shell knowledge will be useful, but not required.
* You do not need to know C, though I'll refer to and map Ruby methods to corresponding or analogous C functions.
* You must know that that two (or more) variables (in Ruby) can refer to the same underlying object.  This concept is present in Unix, so it is _very_ important one understand this:

<pre name="code" class="ruby">
       a = "this is a string"
       b = a      # 'b' refers to the same String object as 'a'
       a << "!"   # modifies the String object 'a' points to

       "this is a string!" == a

       # You should understand why the following statements are true:
       "this is a string!" == b
       "this is a string" != b
</pre>

h2. Notations/conventions

* Ruby method documentation references (should be the same as Ruby documentation)
** IO.pipe -- class/singleton method
** IO#stat -- instance method
* C function documentation references
** pipe(2) -- "#{function_name}(#{section})"
               The C function manpage can be accessed as:
                    man #{section} #{function_name}
               so you can open documentation for pipe(2) using the command: man 2 pipe

That's all I can think of for now...


??License: "GPLv3":http://www.gnu.org/licenses/gpl-3.0.txt (or later, at the discretion of Eric Wong)??
