=title Solve <em>the</em> problem, not just <em>a</em> problem
=description Geeks are prone to build complex tools to solve problems, but the real goal is to solve the <em>right</em> problems. The Korma blogging tool hits that sweet spot.
=entry
So you decide you want a way for a number of people to post short articles to a Web site, and maybe allow for other people to leave comments. What do you do?  That's easy: jump to the white board and start sketching out a vast array of boxes, blobs, and arrows that define a sophisticated content management system with multi-level admin roles, content versioning, threaded discussion boards, syntax highlighting, the works. 

Right?

Don't be too quick to judge.  It's easy to fall into the trap of defining the wrong requirements for a project.

Part of the reason is that building software is (or should be) fun, and often bigger projects are more fun. There is also the tendency to think about "what if", imagining all the things that maybe one day who knows you never call might be needed.

Developers also tend to think in terms of what's familiar, of how things have been done in the past or by others. 

There are many ways to satisfy the needs described in the first paragraph.  Some don't require writing any software at all.

For the Ruby Best Practices blog, the general goals were modest.  Allow a core set of people to easily add new content.  Allow other people to contribute content as well, but only with the OK from one of that core group.

We wanted to allow the use of Textile, and not make people use a browser for editing.  Basically, turn simple flat files into a Web site with minimal fuss.

"Korma":http://github.com/sandal/korma/tree/master takes an interesting approach to building Web sites.  The whole app is ~230 lines of Ruby. Its key function is to take content from a Git repository, run it through some templating, and write out the site files.

Relying on Git for that back end is stunningly perfect. Git provides versioning, access control, and distributed contributions.

It becomes the database layer common to most blogging tools. For free.  Right off the bat, no need to write any admin tools, or content versioning.   

At the heart of Korma is the "grit":http://github.com/mojombo/grit/tree/master gem. As the project blurb says, " 	 Grit gives you object oriented read/write access to Git repositories via Ruby."  Very sweet.

The korma.rb file takes two arguments.  The first is required, and is the path to a git repository.  The second argument is optional; it tells Korma what directory to use for the generated content, and defaults to 'www'.

The app uses grit to reach into the current contents of the repo and parse the needed files. Files have to be committed to be accessible.


